name: Comprehensive CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  AWS_DEFAULT_REGION: us-east-1
  BUCKET_NAME: test-bucket

jobs:
  # Job 1: Code Quality and Security
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run _lint

      - name: Security Audit
        run: npm audit --audit-level=high

      - name: Check for Vulnerabilities
        run: |
          npm audit --json > audit-report.json || true
          if [ -s audit-report.json ]; then
            echo "Security vulnerabilities found!"
            npm audit
            exit 1
          fi

  # Job 2: Unit Tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Run Unit Tests with Coverage
        run: npm run test:unit:coverage

      - name: Upload Coverage Reports
        uses: codecov/codecov-action@v4
        with:
          file: ./reports/coverage/lcov.info
          flags: unittests
          name: unit-tests-coverage
          fail_ci_if_error: false

      - name: Upload Coverage Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: |
            reports/coverage/
            reports/coverage/lcov.info
          retention-days: 30

  # Job 3: Integration Tests with LocalStack
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    services:
      localstack:
        image: localstack/localstack:latest
        ports:
          - 4566:4566
        env:
          SERVICES: lambda,s3,stepfunctions,dynamodb
          DEFAULT_REGION: us-east-1
          DEBUG: 1
          LS_LOG: warn
          LAMBDA_EXECUTOR: local
          PERSISTENCE: false
        options: >-
          --health-cmd="curl -f http://localhost:4566/_localstack/health"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
          --health-start-period=30s

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Wait for LocalStack
        run: |
          echo "Waiting for LocalStack to be ready..."
          timeout 60 bash -c 'until curl -f http://localhost:4566/_localstack/health; do sleep 2; done'
          echo "LocalStack is ready!"

      - name: Deploy to LocalStack
        run: |
          npm run deploy:localstack
          sleep 10

      - name: Verify LocalStack Services
        run: npm run verify:localstack

      - name: Run Integration Tests
        run: |
          export ENDPOINT=http://localhost:4566
          export AWS_REGION=us-east-1
          export BUCKET=test-bucket
          npm run test:unit -- --testNamePattern="integration" --testTimeout=60000

      - name: Upload Integration Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-test-results
          path: |
            reports/
            *.log
          retention-days: 30

  # Job 4: Performance Tests with K6
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: integration-tests
    services:
      localstack:
        image: localstack/localstack:latest
        ports:
          - 4566:4566
        env:
          SERVICES: lambda,s3,stepfunctions,dynamodb
          DEFAULT_REGION: us-east-1
          DEBUG: 1
          LS_LOG: warn
          LAMBDA_EXECUTOR: local
          PERSISTENCE: false
        options: >-
          --health-cmd="curl -f http://localhost:4566/_localstack/health"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
          --health-start-period=30s

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Install K6
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Wait for LocalStack
        run: |
          echo "Waiting for LocalStack to be ready..."
          timeout 60 bash -c 'until curl -f http://localhost:4566/_localstack/health; do sleep 2; done'

      - name: Deploy to LocalStack
        run: |
          npm run deploy:localstack
          sleep 10

      - name: Start API Gateway Simulation
        run: |
          npm start &
          sleep 15
          curl -f http://localhost:3000/health || echo "API Gateway not ready"

      - name: Run Performance Tests - POST
        run: |
          npm run test:post
          
      - name: Run Performance Tests - GET
        run: |
          npm run test:get

      - name: Upload Performance Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-test-results
          path: |
            reports/
            *-results.json
          retention-days: 30

  # Job 5: End-to-End Tests
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: performance-tests
    services:
      localstack:
        image: localstack/localstack:latest
        ports:
          - 4566:4566
        env:
          SERVICES: lambda,s3,stepfunctions,dynamodb
          DEFAULT_REGION: us-east-1
          DEBUG: 1
          LS_LOG: warn
          LAMBDA_EXECUTOR: local
          PERSISTENCE: false
        options: >-
          --health-cmd="curl -f http://localhost:4566/_localstack/health"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
          --health-start-period=30s

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Wait for LocalStack
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:4566/_localstack/health; do sleep 2; done'

      - name: Run Complete Test Suite
        run: |
          npm run setup
          npm run test:robust

      - name: Upload E2E Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-results
          path: |
            reports/
            *.log
          retention-days: 30

  # Job 6: Build and Package
  build:
    name: Build & Package
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, performance-tests]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci --production

      - name: Create Lambda Deployment Package
        run: |
          # Create deployment packages for each Lambda
          mkdir -p dist
          
          # Main Lambda
          zip -r dist/lambda.zip lambda/ node_modules/ package.json
          
          # Lambda1
          zip -r dist/lambda1.zip lambda1/ node_modules/ package.json
          
          # Lambda2  
          zip -r dist/lambda2.zip lambda2/ node_modules/ package.json
          
          # Lambda3
          zip -r dist/lambda3.zip lambda3/ node_modules/ package.json

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: lambda-packages
          path: |
            dist/
            docker-compose*.yml
            state-machine-definition.json
          retention-days: 30

  # Job 7: Security Scanning
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Job 8: Generate Consolidated Report
  report:
    name: Generate Reports
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, performance-tests, e2e-tests]
    if: always()
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Generate Consolidated Report
        run: |
          npm run report:consolidated
          
      - name: Upload Consolidated Report
        uses: actions/upload-artifact@v4
        with:
          name: consolidated-report
          path: |
            reports/consolidated/
            reports/
          retention-days: 90

  # Job 9: Deploy to Staging (on main branch)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: staging
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: lambda-packages
          path: dist/

      - name: Deploy to AWS (Staging)
        run: |
          echo "Deploying to staging environment..."
          echo "Lambda packages ready for deployment"
          ls -la dist/
          # Add actual AWS deployment commands here
          # aws lambda update-function-code --function-name staging-lambda --zip-file fileb://dist/lambda.zip

  # Job 10: Production Deployment (manual trigger)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/main' && github.event_name == 'workflow_dispatch'
    environment: production
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: lambda-packages
          path: dist/

      - name: Deploy to AWS (Production)
        run: |
          echo "Deploying to production environment..."
          echo "Lambda packages ready for deployment"
          ls -la dist/
          # Add actual AWS deployment commands here

  # Job 11: Notification
  notify:
    name: Notification
    runs-on: ubuntu-latest
    needs: [code-quality, unit-tests, integration-tests, performance-tests, e2e-tests, build, security-scan, report]
    if: always()
    steps:
      - name: Notify on Success
        if: ${{ needs.code-quality.result == 'success' && needs.unit-tests.result == 'success' && needs.build.result == 'success' }}
        run: |
          echo "✅ CI/CD Pipeline completed successfully!"
          echo "All tests passed and build artifacts are ready."

      - name: Notify on Failure
        if: ${{ needs.code-quality.result == 'failure' || needs.unit-tests.result == 'failure' || needs.integration-tests.result == 'failure' || needs.performance-tests.result == 'failure' || needs.build.result == 'failure' }}
        run: |
          echo "❌ CI/CD Pipeline failed!"
          echo "Check the logs for details."
          exit 1
