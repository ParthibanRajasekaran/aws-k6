name: Lambda S3 Testing (Simple)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_DEFAULT_REGION: us-east-1
  AWS_ACCESS_KEY_ID: test
  AWS_SECRET_ACCESS_KEY: test
  LOCALSTACK_HOST: localhost
  ENDPOINT: http://localhost:4566

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci
        sudo apt-get update
        sudo apt-get install -y curl jq docker-compose
        
        # Install AWS CLI v2
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        unzip awscliv2.zip
        sudo ./aws/install
        
        # Install k6
        sudo gpg -k
        sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6

    - name: Start LocalStack
      run: |
        echo "Starting LocalStack..."
        docker-compose up -d localstack
        
        # Wait for LocalStack to be ready
        echo "Waiting for LocalStack to be healthy..."
        max_attempts=30
        attempt=0
        while [ $attempt -lt $max_attempts ]; do
          if curl -f http://localhost:4566/_localstack/health 2>/dev/null; then
            echo "LocalStack is ready!"
            curl -s http://localhost:4566/_localstack/health | jq '.services'
            break
          fi
          echo "Attempt $((attempt + 1))/$max_attempts - waiting 5 seconds..."
          sleep 5
          attempt=$((attempt + 1))
        done
        
        if [ $attempt -eq $max_attempts ]; then
          echo "LocalStack failed to start"
          docker logs $(docker ps -q --filter ancestor=localstack/localstack:latest) || echo "No LocalStack container found"
          exit 1
        fi

    - name: Configure AWS CLI
      run: |
        aws configure set aws_access_key_id test
        aws configure set aws_secret_access_key test
        aws configure set region us-east-1
        aws configure set output json

    - name: Deploy Lambda and S3
      run: |
        echo "Deploying Lambda and S3..."
        node scripts/deploy-localstack.js

    - name: Verify deployment
      run: |
        echo "Verifying deployment..."
        aws --endpoint-url=http://localhost:4566 s3 ls
        aws --endpoint-url=http://localhost:4566 lambda list-functions

    - name: Run unit tests
      run: |
        echo "Running unit tests..."
        npm run test:unit
      continue-on-error: true

    - name: Start API Gateway
      run: |
        echo "Starting API Gateway simulation..."
        nohup npm start > api-gateway.log 2>&1 &
        sleep 5
        
        # Check if API Gateway is responding
        if curl -f http://localhost:3000/health; then
          echo "API Gateway is ready!"
        else
          echo "API Gateway startup issues:"
          cat api-gateway.log
        fi

    - name: Run performance tests
      run: |
        echo "Running k6 performance tests..."
        
        # Run POST test
        k6 run --vus 2 --duration 10s k6/post-test.js || echo "POST test completed with issues"
        
        # Run GET test  
        k6 run --vus 2 --duration 10s k6/get-test.js || echo "GET test completed with issues"
      continue-on-error: true

    - name: Collect logs
      if: always()
      run: |
        echo "=== API Gateway Logs ==="
        cat api-gateway.log 2>/dev/null || echo "No API Gateway logs"
        
        echo "=== LocalStack Logs ==="
        docker logs $(docker ps -q --filter ancestor=localstack/localstack:latest) 2>&1 | tail -50 || echo "No LocalStack logs"

    - name: Cleanup
      if: always()
      run: |
        pkill -f "npm start" || echo "No API Gateway processes"
        docker-compose down || echo "Docker cleanup completed"
