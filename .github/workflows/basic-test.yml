name: Lambda S3 CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  # Job 1: Unit Tests (fastest, no external dependencies)
  unit-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run unit tests
      run: npm run test:unit

    - name: Upload unit test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: unit-test-results
        path: reports/coverage/

  # Job 2: Integration Tests (LocalStack + Lambda + S3)
  integration-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: unit-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Start LocalStack with Docker
      run: |
        # Start LocalStack with optimized configuration
        docker run -d \
          --name localstack \
          -p 4566:4566 \
          -e SERVICES=lambda,s3 \
          -e DEBUG=0 \
          -e LAMBDA_EXECUTOR=local \
          -e PERSISTENCE=false \
          -e SKIP_INFRA_DOWNLOADS=1 \
          localstack/localstack:latest
        
        # Wait for LocalStack to be ready with efficient health checks
        echo "Waiting for LocalStack to start..."
        sleep 10
        
        # Efficient health check with timeout
        for i in {1..20}; do
          if curl -s --max-time 3 http://localhost:4566/_localstack/health | grep -q '"s3": "available"' && \
             curl -s --max-time 3 http://localhost:4566/_localstack/health | grep -q '"lambda": "available"'; then
            echo "LocalStack is ready!"
            break
          fi
          echo "Waiting for LocalStack services... attempt $i/20"
          sleep 3
        done

    - name: Install and configure AWS CLI
      run: |
        # Install AWS CLI efficiently
        if command -v aws &> /dev/null; then
          echo "AWS CLI already installed: \$(aws --version)"
        else
          curl -s "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip -q awscliv2.zip
          sudo ./aws/install
          echo "AWS CLI installed: \$(aws --version)"
        fi
        
        # Configure AWS CLI for LocalStack
        aws configure set aws_access_key_id test
        aws configure set aws_secret_access_key test
        aws configure set region us-east-1

    - name: Test S3 integration
      run: |
        echo "Testing S3 integration..."
        
        # Verify LocalStack health
        curl -s --max-time 5 http://localhost:4566/_localstack/health | jq '.' || echo "Health check failed"
        
        # Test S3 operations
        aws --endpoint-url=http://localhost:4566 s3 mb s3://test-bucket
        echo "test content" | aws --endpoint-url=http://localhost:4566 s3 cp - s3://test-bucket/test.txt
        aws --endpoint-url=http://localhost:4566 s3 ls s3://test-bucket/
        
        echo "S3 integration test passed!"

    - name: Test Lambda integration
      run: |
        echo "Testing Lambda integration..."
        
        # Package Lambda function
        cd lambda
        zip -r ../lambda.zip .
        cd ..
        
        # Deploy Lambda function
        aws --endpoint-url=http://localhost:4566 lambda create-function \
          --function-name test-lambda \
          --runtime nodejs20.x \
          --role arn:aws:iam::000000000000:role/fake-role \
          --handler index.handler \
          --zip-file fileb://lambda.zip
        
        # Test Lambda invocation with base64 encoding
        echo "Waiting for Lambda function to be ready..."
        sleep 5
        
        # Use base64 encoded payload as AWS CLI expects
        PAYLOAD='{"httpMethod": "GET", "queryStringParameters": {"test": "integration"}}'
        PAYLOAD_B64=$(echo -n "$PAYLOAD" | base64)
        echo "Using base64 encoded payload for Lambda invocation"
        
        aws --endpoint-url=http://localhost:4566 lambda invoke \
          --function-name test-lambda \
          --payload "$PAYLOAD_B64" \
          response.json
        
        echo "Lambda response:"
        cat response.json
        
        echo "Lambda integration test passed!"

    - name: Upload integration test artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: integration-test-results
        path: |
          response.json
          lambda.zip

    - name: Cleanup LocalStack
      if: always()
      run: |
        docker stop localstack || echo "LocalStack already stopped"
        docker rm localstack || echo "LocalStack container already removed"

  # Job 3: API Gateway Tests (can run in parallel with integration tests)
  api-gateway-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 8
    needs: unit-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Start LocalStack for API Gateway tests
      run: |
        # Start LocalStack for API Gateway testing
        docker run -d \
          --name localstack-api \
          -p 4566:4566 \
          -e SERVICES=lambda,s3 \
          -e DEBUG=0 \
          -e LAMBDA_EXECUTOR=local \
          -e PERSISTENCE=false \
          localstack/localstack:latest
        
        # Quick health check
        sleep 8
        for i in {1..15}; do
          if curl -s --max-time 3 http://localhost:4566/_localstack/health | grep -q '"s3": "available"'; then
            echo "LocalStack ready for API tests!"
            break
          fi
          sleep 2
        done

    - name: Deploy Lambda for API Gateway
      run: |
        # Configure AWS CLI
        aws configure set aws_access_key_id test
        aws configure set aws_secret_access_key test
        aws configure set region us-east-1
        
        # Package and deploy Lambda
        cd lambda
        zip -r ../lambda-api.zip .
        cd ..
        
        aws --endpoint-url=http://localhost:4566 lambda create-function \
          --function-name api-test-lambda \
          --runtime nodejs20.x \
          --role arn:aws:iam::000000000000:role/fake-role \
          --handler index.handler \
          --zip-file fileb://lambda-api.zip

    - name: Test API Gateway simulation
      run: |
        echo "Starting API Gateway simulation..."
        
        # Start API Gateway in background
        timeout 25s npm start &
        API_PID=\$!
        sleep 5
        
        # Test API Gateway endpoints
        echo "Testing health endpoint..."
        curl -f http://localhost:3000/health || echo "Health check failed"
        
        echo "Testing POST endpoint..."
        curl -X POST http://localhost:3000/upload -d '{"test": "api-data"}' -H "Content-Type: application/json" || echo "POST test failed"
        
        echo "Testing GET endpoint..."
        curl -X GET "http://localhost:3000/download?key=test-key" || echo "GET test failed"
        
        # Stop API Gateway
        kill \$API_PID 2>/dev/null || echo "API Gateway already stopped"

    - name: Cleanup API Gateway LocalStack
      if: always()
      run: |
        pkill -f "npm start" || echo "No npm processes to kill"
        docker stop localstack-api || echo "LocalStack API already stopped"
        docker rm localstack-api || echo "LocalStack API container already removed"

  # Job 4: Final validation and cleanup
  validate-and-cleanup:
    runs-on: ubuntu-latest
    timeout-minutes: 3
    needs: [unit-tests, integration-tests, api-gateway-tests]
    if: always()
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/

    - name: Validate test results
      run: |
        echo "=== CI/CD Pipeline Summary ==="
        echo "Unit Tests: \${{ needs.unit-tests.result }}"
        echo "Integration Tests: \${{ needs.integration-tests.result }}"
        echo "API Gateway Tests: \${{ needs.api-gateway-tests.result }}"
        
        # List all artifacts
        if [ -d "artifacts" ]; then
          echo "=== Generated Artifacts ==="
          find artifacts/ -type f -name "*.json" -o -name "*.zip" -o -name "*.html" | head -10
        fi
        
        # Determine overall status
        if [[ "\${{ needs.unit-tests.result }}" == "success" && 
              "\${{ needs.integration-tests.result }}" == "success" && 
              "\${{ needs.api-gateway-tests.result }}" == "success" ]]; then
          echo "✅ All tests passed successfully!"
          exit 0
        else
          echo "❌ Some tests failed. Check individual job results."
          exit 1
        fi
