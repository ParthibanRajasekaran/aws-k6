name: Simple CI Pipeline

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  AWS_DEFAULT_REGION: us-east-1

jobs:
  # Fast feedback loop - run in parallel
  lint-and-audit:
    name: Lint & Security Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      - run: npm ci
      - run: npm run _lint
      - run: npm audit --audit-level=moderate

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      - run: npm ci
      - run: npm run test:unit:coverage
      - uses: actions/upload-artifact@v4
        with:
          name: unit-test-coverage
          path: reports/coverage/
          retention-days: 7

  # Integration tests with LocalStack
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [lint-and-audit, unit-tests]
    services:
      localstack:
        image: localstack/localstack:latest
        ports:
          - 4566:4566
        env:
          SERVICES: lambda,s3,stepfunctions,dynamodb
          DEFAULT_REGION: us-east-1
          LS_LOG: warn
          LAMBDA_EXECUTOR: local
        options: >-
          --health-cmd="curl -f http://localhost:4566/_localstack/health"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
          --health-start-period=20s

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      - run: npm ci
      
      - name: Wait for LocalStack
        run: |
          timeout 30 bash -c 'until curl -f http://localhost:4566/_localstack/health; do sleep 2; done'
          
      - name: Deploy and Test
        run: |
          npm run deploy:localstack
          sleep 5
          export ENDPOINT=http://localhost:4566
          npm run verify:localstack

  # Performance tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: integration-tests
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      - run: npm ci
      
      - name: Install K6
        run: |
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Start LocalStack
        run: |
          docker compose up -d localstack
          timeout 60 bash -c 'until curl -f http://localhost:4566/_localstack/health; do sleep 2; done'
          
      - name: Deploy and Run Performance Tests
        run: |
          npm run deploy:localstack
          npm start &
          sleep 10
          npm run test:post
          npm run test:get
          
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-results
          path: |
            reports/
            *-results.json
          retention-days: 7

  # Build and package
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      - run: npm ci --production
      
      - name: Package Lambda Functions
        run: |
          mkdir -p dist
          zip -r dist/lambda.zip lambda/ node_modules/ package.json
          zip -r dist/lambda1.zip lambda1/ node_modules/ package.json  
          zip -r dist/lambda2.zip lambda2/ node_modules/ package.json
          zip -r dist/lambda3.zip lambda3/ node_modules/ package.json
          
      - uses: actions/upload-artifact@v4
        with:
          name: lambda-packages
          path: dist/
          retention-days: 30
