name: Lambda S3 Testing Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'lambda/**'
      - 'k6/**'
      - 'scripts/**'
      - 'docker-compose.yml'
      - '.github/workflows/lambda-s3.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'lambda/**'
      - 'k6/**'
      - 'scripts/**'
  workflow_dispatch:
    inputs:
      test_duration:
        description: 'K6 test duration (e.g., 30s, 2m)'
        required: false
        default: '30s'
      virtual_users:
        description: 'Number of virtual users for K6 tests'
        required: false
        default: '10'

env:
  AWS_DEFAULT_REGION: us-east-1
  AWS_ACCESS_KEY_ID: test
  AWS_SECRET_ACCESS_KEY: test
  LOCALSTACK_HOST: localhost
  ENDPOINT: http://localhost:4566

jobs:
  lambda-s3-test:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y curl jq zip unzip docker-compose
        
        # Install AWS CLI v2
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        unzip awscliv2.zip
        sudo ./aws/install
        
        # Install k6
        sudo gpg -k
        sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6

    - name: Install Node.js dependencies
      run: npm ci

    - name: Start LocalStack
      run: |
        # Start LocalStack using docker-compose
        docker-compose up -d localstack
        echo "LocalStack started, waiting for it to be ready..."

    - name: Wait for LocalStack to be ready
      run: |
        echo "Waiting for LocalStack to be healthy..."
        max_attempts=30
        attempt=0
        while [ $attempt -lt $max_attempts ]; do
          if curl -f http://localhost:4566/_localstack/health 2>/dev/null; then
            echo "LocalStack is ready!"
            curl -s http://localhost:4566/_localstack/health | jq '.services'
            break
          fi
          echo "Attempt $((attempt + 1))/$max_attempts - LocalStack not ready yet, waiting 5 seconds..."
          sleep 5
          attempt=$((attempt + 1))
        done
        
        if [ $attempt -eq $max_attempts ]; then
          echo "LocalStack failed to start after $max_attempts attempts"
          docker logs $(docker ps -q --filter ancestor=localstack/localstack:latest) || echo "No LocalStack container found"
          exit 1
        fi

    - name: Configure AWS CLI for LocalStack
      run: |
        aws configure set aws_access_key_id test
        aws configure set aws_secret_access_key test
        aws configure set region us-east-1
        aws configure set output json

    - name: Create S3 bucket and deploy Lambda
      run: |
        echo "Creating S3 bucket and deploying Lambda..."
        node scripts/deploy-localstack.js

    - name: Verify Lambda deployment
      run: |
        echo "Listing Lambda functions..."
        aws --endpoint-url=http://localhost:4566 lambda list-functions
        
        echo "Testing basic Lambda function invocation..."
        aws --endpoint-url=http://localhost:4566 lambda invoke \
          --function-name test-lambda \
          --payload '{"httpMethod": "GET", "queryStringParameters": {"test": "data"}}' \
          response.json || echo "Lambda invocation test completed"
        
        if [ -f response.json ]; then
          echo "Lambda response:"
          cat response.json
        fi

    - name: Start API Gateway simulation
      run: |
        echo "Starting API Gateway simulation..."
        nohup npm start > api-gateway.log 2>&1 &
        API_PID=$!
        echo $API_PID > api-gateway.pid
        
        # Wait for API to be ready with better error handling
        max_attempts=15
        attempt=0
        while [ $attempt -lt $max_attempts ]; do
          if curl -f http://localhost:3000/health 2>/dev/null; then
            echo "API Gateway is ready!"
            break
          fi
          echo "Attempt $((attempt + 1))/$max_attempts - API Gateway not ready yet, waiting 2 seconds..."
          sleep 2
          attempt=$((attempt + 1))
        done
        
        if [ $attempt -eq $max_attempts ]; then
          echo "API Gateway failed to start, showing logs:"
          cat api-gateway.log || echo "No API Gateway logs found"
        fi
        
        echo "API Gateway started with PID: $API_PID"

    - name: Run unit tests
      run: |
        echo "Running unit tests with coverage..."
        npm run test:unit:coverage
      continue-on-error: false

    - name: Run Lambda+S3 POST performance tests
      run: |
        echo "Running POST performance tests..."
        k6 run \
          --vus ${{ github.event.inputs.virtual_users || '5' }} \
          --duration ${{ github.event.inputs.test_duration || '30s' }} \
          --out json=reports/post-test-results.json \
          k6/post-test.js
      env:
        API_URL: http://localhost:3000

    - name: Run Lambda+S3 GET performance tests
      run: |
        echo "Running GET performance tests..."
        k6 run \
          --vus ${{ github.event.inputs.virtual_users || '3' }} \
          --duration ${{ github.event.inputs.test_duration || '20s' }} \
          --out json=reports/get-test-results.json \
          k6/get-test.js
      env:
        API_URL: http://localhost:3000

    - name: Generate test reports
      run: |
        echo "Generating consolidated test report..."
        mkdir -p reports/consolidated
        node scripts/generate-consolidated-report.js
      continue-on-error: true

    - name: Collect logs and diagnostics
      if: always()
      run: |
        echo "=== API Gateway Logs ==="
        if [ -f api-gateway.log ]; then
          tail -50 api-gateway.log || echo "No API Gateway logs found"
        fi
        
        echo "=== LocalStack Logs ==="
        docker logs $(docker ps -q --filter ancestor=localstack/localstack:latest) 2>&1 | tail -50 || echo "No LocalStack logs found"
        
        echo "=== S3 Bucket Contents ==="
        aws --endpoint-url=http://localhost:4566 s3 ls s3://test-bucket --recursive || echo "Could not list S3 contents"
        
        echo "=== Lambda Functions ==="
        aws --endpoint-url=http://localhost:4566 lambda list-functions || echo "Could not list Lambda functions"

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: lambda-s3-test-results
        path: |
          reports/
          api-gateway.log
        retention-days: 7

    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: lambda-s3-coverage
        path: |
          coverage/
        retention-days: 7

    - name: Cleanup
      if: always()
      run: |
        # Stop API Gateway
        if [ -f api-gateway.pid ]; then
          kill $(cat api-gateway.pid) 2>/dev/null || echo "API Gateway already stopped"
        fi
        
        # Clean up any remaining processes
        pkill -f "node api-gateway-sim.js" || echo "No API Gateway processes to kill"
        
        # Stop LocalStack
        docker-compose down || echo "Docker compose cleanup completed"

  # Summary job to provide overall status
  test-summary:
    needs: lambda-s3-test
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Download test results
      uses: actions/download-artifact@v4
      with:
        name: lambda-s3-test-results
        path: ./results

    - name: Test Summary
      run: |
        echo "## Lambda+S3 Test Summary" >> $GITHUB_STEP_SUMMARY
        echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.lambda-s3-test.result }}" == "success" ]; then
          echo "| Overall | ✅ PASSED |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| Overall | ❌ FAILED |" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Test Artifacts Available:" >> $GITHUB_STEP_SUMMARY
        echo "- Test results and logs" >> $GITHUB_STEP_SUMMARY
        echo "- Code coverage reports" >> $GITHUB_STEP_SUMMARY
        echo "- Performance test metrics" >> $GITHUB_STEP_SUMMARY
